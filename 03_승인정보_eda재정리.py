# -*- coding: utf-8 -*-
"""03_승인정보 EDA재정리.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IFepz9-lezRj4Yii-nHV5vrzc_l3ddiF
"""

# 📌 1. 나눔고딕 설치
!apt-get -qq install -y fonts-nanum

# 📌 2. matplotlib에 설치된 나눔고딕 경로 직접 반영
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import seaborn as sns

font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'
font_prop = fm.FontProperties(fname=font_path)
plt.rcParams['font.family'] = font_prop.get_name()
plt.rcParams['axes.unicode_minus'] = False
sns.set(style='whitegrid')

# 📌 3. 테스트 그래프
plt.figure(figsize=(4,3))
plt.title("한글 시각화 성공!", fontproperties=font_prop)
plt.plot([1, 2, 3], [1, 4, 9])
plt.xlabel("가로축", fontproperties=font_prop)
plt.ylabel("세로축", fontproperties=font_prop)
plt.show()

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

file_path = "/content/drive/MyDrive/승인매출_원본.csv"
df_all = pd.read_csv(file_path, encoding="utf-8-sig")  # 또는 encoding="cp949" 도 시도 가능

print(df_all.shape)
df_all.head()

import re

# 예: 상관계수 결과 전체 텍스트를 여기에 붙여넣거나 파일에서 읽을 수도 있음
corr_text = """최종이용일자_카드론 ↔ 최종카드론_대출일자 = 1.000
이용건수_부분무이자_R12M ↔ 할부건수_부분_12M_R12M = 1.000
이용건수_신용_R12M ↔ 이용건수_신판_R12M = 1.000
최종이용일자_카드론 ↔ 최종카드론이용경과월 = -1.000
이용건수_신용_R6M ↔ 이용건수_신판_R6M = 1.000
이용건수_신용_R3M ↔ 이용건수_신판_R3M = 1.000
이용건수_신용_B0M ↔ 이용건수_신판_B0M = 1.000
이용건수_신판_R3M ↔ 이용건수_일시불_R3M = 1.000
이용건수_신판_B0M ↔ 이용건수_일시불_B0M = 1.000
이용건수_신판_R6M ↔ 이용건수_일시불_R6M = 1.000
이용건수_신판_R12M ↔ 이용건수_일시불_R12M = 1.000
이용건수_신용_R3M ↔ 이용건수_일시불_R3M = 1.000
이용건수_신용_B0M ↔ 이용건수_일시불_B0M = 0.999
이용건수_신용_R6M ↔ 이용건수_일시불_R6M = 0.999
이용건수_신용_R12M ↔ 이용건수_일시불_R12M = 0.999
이용금액_부분무이자_R12M ↔ 할부금액_부분_12M_R12M = 0.999
RP건수_아파트_B0M ↔ RP후경과월_아파트 = -0.998
이용개월수_신판_R6M ↔ 이용개월수_일시불_R6M = 0.997
RP건수_제휴사서비스직접판매_B0M ↔ RP후경과월_제휴사서비스직접판매 = -0.996
이용건수_체크_R6M ↔ 이용금액_체크_R6M = 0.996
최종이용일자_기본 ↔ 최종이용일자_신판 = 0.996
이용개월수_신판_R12M ↔ 이용개월수_일시불_R12M = 0.996
할부건수_14M_R12M ↔ 할부건수_유이자_14M_R12M = 0.995
이용건수_체크_R3M ↔ 이용금액_체크_R3M = 0.995
이용개월수_신판_R3M ↔ 이용개월수_일시불_R3M = 0.995
이용개월수_신용_R12M ↔ 이용개월수_신판_R12M = 0.995
이용개월수_신용_R6M ↔ 이용개월수_신판_R6M = 0.994
카드론이용건수_누적 ↔ 카드론이용월수_누적 = 0.994
최대이용금액_부분무이자_R12M ↔ 이용개월수_부분무이자_R12M = 0.993
이용건수_일시불_B0M ↔ 이용건수_일시불_R3M = 0.993
이용건수_신판_B0M ↔ 이용건수_신판_R3M = 0.993
이용건수_신용_B0M ↔ 이용건수_신용_R3M = 0.993
이용건수_신용_B0M ↔ 이용건수_신판_R3M = 0.993
이용건수_신판_B0M ↔ 이용건수_일시불_R3M = 0.993
이용건수_신판_B0M ↔ 이용건수_신용_R3M = 0.993
이용건수_일시불_B0M ↔ 이용건수_신판_R3M = 0.993
이용건수_신용_B0M ↔ 이용건수_일시불_R3M = 0.993
이용건수_일시불_B0M ↔ 이용건수_신용_R3M = 0.993
이용개월수_신용_R3M ↔ 이용개월수_신판_R3M = 0.992
이용개월수_신용_R12M ↔ 이용개월수_일시불_R12M = 0.992
건수_할부전환_R6M ↔ 금액_할부전환_R6M = 0.992
쇼핑_온라인_이용금액 ↔ _1순위쇼핑업종_이용금액 = 0.992
이용건수_체크_B0M ↔ 이용금액_체크_B0M = 0.992
이용개월수_부분무이자_R12M ↔ 할부금액_부분_12M_R12M = 0.991
최초카드론이용경과월 ↔ 최종카드론_대출이율 = -0.991
이용개월수_신용_R6M ↔ 이용개월수_일시불_R6M = 0.991
이용금액_부분무이자_R12M ↔ 이용개월수_부분무이자_R12M = 0.990
이용건수_신판_R6M ↔ 이용건수_신판_R3M = 0.990
이용건수_일시불_R6M ↔ 이용건수_일시불_R3M = 0.990
이용건수_신용_R6M ↔ 이용건수_신용_R3M = 0.990
이용건수_신판_R6M ↔ 이용건수_신용_R3M = 0.990
이용건수_신판_R6M ↔ 이용건수_일시불_R3M = 0.990
이용건수_신용_R6M ↔ 이용건수_신판_R3M = 0.990
이용건수_체크_R6M ↔ 이용건수_체크_R3M = 0.990
이용건수_일시불_R6M ↔ 이용건수_신판_R3M = 0.989
이용건수_신용_R6M ↔ 이용건수_일시불_R3M = 0.989
이용건수_일시불_R6M ↔ 이용건수_신용_R3M = 0.989
최대이용금액_부분무이자_R12M ↔ 할부금액_부분_12M_R12M = 0.989
이용건수_체크_B0M ↔ 이용건수_체크_R3M = 0.988
이용금액_일시불_B0M ↔ 이용금액_일시불_R3M = 0.987
이용금액_부분무이자_R12M ↔ 최대이용금액_부분무이자_R12M = 0.987
가맹점매출금액_B1M ↔ 가맹점매출금액_B2M = 0.987
이용개월수_신용_R3M ↔ 이용개월수_일시불_R3M = 0.987
이용금액_일시불_R6M ↔ 이용금액_일시불_R3M = 0.987
이용금액_체크_R6M ↔ 이용건수_체크_R3M = 0.986
승인거절건수_B0M ↔ 승인거절건수_한도초과_B0M = 0.986
이용건수_신판_B0M ↔ 이용건수_신판_R6M = 0.986
이용건수_일시불_B0M ↔ 이용건수_일시불_R6M = 0.986
이용금액_체크_R6M ↔ 이용금액_체크_R3M = 0.986
이용건수_신용_B0M ↔ 이용건수_신용_R6M = 0.986
이용건수_신용_B0M ↔ 이용건수_신판_R6M = 0.986
이용건수_일시불_B0M ↔ 이용건수_신판_R6M = 0.986
이용건수_신판_B0M ↔ 이용건수_신용_R6M = 0.986
이용건수_신판_B0M ↔ 이용건수_일시불_R6M = 0.986
이용건수_신용_B0M ↔ 이용건수_일시불_R6M = 0.986
이용건수_일시불_B0M ↔ 이용건수_신용_R6M = 0.986
이용금액_페이_오프라인_R6M ↔ 이용금액_A페이_R6M = 0.985
건수_할부전환_R3M ↔ 금액_할부전환_R3M = 0.985
이용후경과월_신용 ↔ 이용후경과월_신판 = 0.984
이용건수_체크_B0M ↔ 이용금액_체크_R3M = 0.983
이용금액_체크_B0M ↔ 이용금액_체크_R3M = 0.983
이용개월수_체크_R6M ↔ 이용개월수_체크_R3M = 0.982
이용건수_체크_R6M ↔ 이용금액_체크_R3M = 0.982
이용금액_페이_오프라인_R3M ↔ 이용금액_A페이_R3M = 0.981
납부_관리비이용금액 ↔ RP후경과월_아파트 = -0.981
납부_관리비이용금액 ↔ RP건수_아파트_B0M = 0.981
이용건수_간편결제_R6M ↔ 이용건수_간편결제_R3M = 0.981
이용건수_체크_B0M ↔ 이용건수_체크_R6M = 0.980
이용건수_일시불_R12M ↔ 이용건수_일시불_R6M = 0.979
이용건수_신판_R12M ↔ 이용건수_신판_R6M = 0.979
이용건수_신판_R12M ↔ 이용건수_신용_R6M = 0.979
이용건수_신용_R12M ↔ 이용건수_신용_R6M = 0.979
이용건수_일시불_R12M ↔ 이용건수_신판_R6M = 0.979
이용건수_신용_R12M ↔ 이용건수_신판_R6M = 0.979
이용건수_신판_R12M ↔ 이용건수_일시불_R6M = 0.979
이용건수_일시불_R12M ↔ 이용건수_신용_R6M = 0.979
이용건수_신용_R12M ↔ 이용건수_일시불_R6M = 0.979
이용금액_체크_B0M ↔ 이용건수_체크_R3M = 0.978
이용건수_체크_R12M ↔ 이용건수_체크_R6M = 0.978
이용금액_일시불_B0M ↔ 이용금액_일시불_R6M = 0.978
이용건수_체크_B0M ↔ 이용금액_체크_R6M = 0.977
이용건수_체크_R12M ↔ 이용금액_체크_R12M = 0.976
최종이용일자_신판 ↔ 최종이용일자_일시불 = 0.975
이용개월수_페이_오프라인_R6M ↔ 이용건수_페이_오프라인_R6M = 0.975
최종카드론이용경과월 ↔ 최종카드론_대출일자 = -0.975
이용건수_온라인_R6M ↔ 이용건수_온라인_R3M = 0.975
이용건수_페이_오프라인_R3M ↔ 이용건수_페이_오프라인_B0M = 0.974
이용금액_C페이_R3M ↔ 이용건수_C페이_R3M = 0.974
이용금액_체크_B0M ↔ 이용금액_체크_R6M = 0.972
이용금액_페이_오프라인_B0M ↔ 이용금액_A페이_B0M = 0.971
이용건수_페이_오프라인_R6M ↔ 이용건수_페이_오프라인_R3M = 0.971
최종이용일자_기본 ↔ 최종이용일자_일시불 = 0.971
이용건수_체크_R12M ↔ 이용건수_체크_R3M = 0.970
이용건수_일시불_B0M ↔ 이용건수_일시불_R12M = 0.970
이용건수_CA_R12M ↔ 이용개월수_CA_R12M = 0.969
이용건수_신판_B0M ↔ 이용건수_일시불_R12M = 0.969
이용건수_신판_B0M ↔ 이용건수_신판_R12M = 0.969
이용건수_신용_B0M ↔ 이용건수_신판_R12M = 0.969
이용건수_신용_B0M ↔ 이용건수_신용_R12M = 0.969
이용건수_신용_B0M ↔ 이용건수_일시불_R12M = 0.969
이용개월수_신판_R6M ↔ 이용개월수_신판_R3M = 0.969
이용건수_일시불_B0M ↔ 이용건수_신판_R12M = 0.969
이용개월수_일시불_R6M ↔ 이용개월수_일시불_R3M = 0.969
이용건수_신판_B0M ↔ 이용건수_신용_R12M = 0.969
이용가맹점수 ↔ 이용건수_오프라인_B0M = 0.969
이용금액_페이_오프라인_R6M ↔ 이용금액_페이_오프라인_R3M = 0.969
이용건수_일시불_B0M ↔ 이용건수_신용_R12M = 0.969
이용건수_체크_R12M ↔ 이용금액_체크_R6M = 0.969
이용개월수_CA_R6M ↔ 이용개월수_CA_R3M = 0.969
이용건수_간편결제_R3M ↔ 이용건수_간편결제_B0M = 0.968
이용개월수_신용_R6M ↔ 이용개월수_신용_R3M = 0.968
이용금액_페이_오프라인_R3M ↔ 이용금액_페이_오프라인_B0M = 0.968
이용건수_일시불_R12M ↔ 이용건수_일시불_R3M = 0.968
이용건수_할부_R12M ↔ 할부건수_3M_R12M = 0.968
이용금액_체크_B0M ↔ 이용건수_체크_R6M = 0.968
이용건수_신판_R12M ↔ 이용건수_신판_R3M = 0.968
이용건수_신판_R12M ↔ 이용건수_신용_R3M = 0.968
이용건수_신용_R12M ↔ 이용건수_신용_R3M = 0.968
이용건수_일시불_R12M ↔ 이용건수_신판_R3M = 0.968
이용건수_신판_R12M ↔ 이용건수_일시불_R3M = 0.968
이용건수_일시불_R12M ↔ 이용건수_신용_R3M = 0.968
이용금액_체크_R12M ↔ 이용건수_체크_R6M = 0.968
이용건수_신용_R12M ↔ 이용건수_신판_R3M = 0.968
이용건수_신용_R12M ↔ 이용건수_일시불_R3M = 0.967
이용건수_오프라인_R6M ↔ 이용건수_오프라인_R3M = 0.967
이용개월수_일시불_R6M ↔ 이용개월수_신판_R3M = 0.967
이용개월수_신판_R6M ↔ 이용개월수_일시불_R3M = 0.967
이용금액_A페이_R6M ↔ 이용금액_A페이_R3M = 0.967
이용개월수_할부_R12M ↔ 이용개월수_할부_무이자_R12M = 0.966
이용건수_오프라인_R3M ↔ 이용건수_오프라인_B0M = 0.966
이용금액_A페이_R3M ↔ 이용금액_A페이_B0M = 0.966
이용건수_온라인_R3M ↔ 이용건수_온라인_B0M = 0.966
이용건수_할부_무이자_R12M ↔ 할부건수_무이자_3M_R12M = 0.966
이용개월수_전체_R6M ↔ 이용개월수_전체_R3M = 0.966
이용금액_C페이_R6M ↔ 이용건수_C페이_R6M = 0.965
이용금액_CA_R6M ↔ 이용금액_CA_R3M = 0.965
이용건수_체크_B0M ↔ 이용건수_체크_R12M = 0.965
이용개월수_신용_R6M ↔ 이용개월수_신판_R3M = 0.964
이용금액_C페이_B0M ↔ 이용건수_C페이_B0M = 0.964
이용개월수_신판_R6M ↔ 이용개월수_신용_R3M = 0.963
이용개월수_A페이_R6M ↔ 이용건수_A페이_R6M = 0.963
이용건수_할부_R6M ↔ 이용건수_할부_무이자_R6M = 0.963
이용건수_CA_R6M ↔ 이용개월수_CA_R6M = 0.963
최초카드론이용경과월 ↔ 최종카드론이용경과월 = 0.963
최종이용일자_카드론 ↔ 최초카드론이용경과월 = -0.963
이용금액_체크_R12M ↔ 이용건수_체크_R3M = 0.962
이용건수_페이_온라인_R6M ↔ 이용건수_페이_온라인_R3M = 0.962
이용금액_CA_B0M ↔ 이용금액_CA_R3M = 0.962
이용건수_CA_R6M ↔ 이용건수_CA_R3M = 0.962
이용개월수_신용_R6M ↔ 이용개월수_일시불_R3M = 0.961
이용개월수_A페이_R6M ↔ 이용건수_A페이_B0M = 0.961
이용개월수_일시불_R6M ↔ 이용개월수_신용_R3M = 0.961
이용금액_페이_오프라인_R3M ↔ 이용금액_A페이_R6M = 0.960
이용금액_페이_온라인_R6M ↔ 이용금액_페이_온라인_R3M = 0.960
이용건수_체크_B0M ↔ 이용금액_체크_R12M = 0.960
이용금액_체크_R12M ↔ 이용금액_체크_R6M = 0.959
이용건수_할부_R12M ↔ 이용건수_할부_무이자_R12M = 0.959
이용횟수_선결제_B0M ↔ 이용금액_선결제_B0M = 0.959
이용건수_A페이_R6M ↔ 이용건수_A페이_R3M = 0.958
이용개월수_결제일_R6M ↔ 이용개월수_결제일_R3M = 0.958
이용금액_페이_오프라인_R6M ↔ 이용금액_A페이_R3M = 0.958
이용개월수_페이_오프라인_R6M ↔ 이용건수_페이_오프라인_R3M = 0.958
이용건수_체크_R12M ↔ 이용금액_체크_R3M = 0.957
교통_주유이용금액 ↔ _1순위교통업종_이용금액 = 0.957
이용건수_페이_오프라인_R6M ↔ 이용건수_페이_오프라인_B0M = 0.957
할부건수_3M_R12M ↔ 할부건수_무이자_3M_R12M = 0.956
이용개월수_페이_온라인_R6M ↔ 이용개월수_간편결제_R6M = 0.955
할부건수_6M_R12M ↔ 할부건수_무이자_6M_R12M = 0.954
이용후경과월_할부 ↔ 이용후경과월_할부_무이자 = 0.954
이용횟수_선결제_R6M ↔ 이용횟수_선결제_R3M = 0.954
이용개월수_체크_R12M ↔ 이용개월수_체크_R6M = 0.954
정상청구원금_B0M ↔ 정상청구원금_B2M = 0.954
이용금액_간편결제_R3M ↔ 이용금액_간편결제_B0M = 0.954
이용금액_선결제_R6M ↔ 이용금액_선결제_R3M = 0.953
이용금액_페이_오프라인_R3M ↔ 이용금액_A페이_B0M = 0.953
이용건수_간편결제_R6M ↔ 이용건수_간편결제_B0M = 0.952
이용횟수_선결제_R3M ↔ 이용금액_선결제_R3M = 0.952
이용건수_CA_R12M ↔ 이용건수_CA_R6M = 0.952
이용금액_체크_R12M ↔ 이용금액_체크_R3M = 0.952
이용개월수_신판_R6M ↔ 이용개월수_오프라인_R6M = 0.951
이용개월수_A페이_R6M ↔ 이용건수_A페이_R3M = 0.951
이용금액_간편결제_R6M ↔ 이용금액_간편결제_R3M = 0.951
이용개월수_페이_오프라인_R6M ↔ 이용개월수_A페이_R6M = 0.950
이용개월수_일시불_R6M ↔ 이용개월수_오프라인_R6M = 0.950
이용금액_페이_오프라인_B0M ↔ 이용금액_A페이_R3M = 0.950
이용건수_CA_B0M ↔ 이용건수_CA_R3M = 0.950
이용건수_카드론_R3M ↔ 이용금액_카드론_R3M = 0.950
이용개월수_페이_오프라인_R6M ↔ 이용건수_페이_오프라인_B0M = 0.950
이용금액_B페이_B0M ↔ 이용건수_B페이_B0M = 0.950
이용건수_CA_R12M ↔ 이용개월수_CA_R6M = 0.949
할부금액_3M_R12M ↔ 할부금액_무이자_3M_R12M = 0.949
교통_버스지하철이용금액 ↔ RP건수_교통_B0M = 0.949
이용건수_할부_R6M ↔ 이용건수_할부_R3M = 0.948
이용금액_체크_B0M ↔ 이용건수_체크_R12M = 0.948
이용건수_신용_B0M ↔ 이용건수_오프라인_B0M = 0.948
이용건수_신판_B0M ↔ 이용건수_오프라인_B0M = 0.948
이용가맹점수 ↔ 이용건수_오프라인_R3M = 0.948
이용건수_일시불_B0M ↔ 이용건수_오프라인_B0M = 0.948
이용금액_페이_온라인_R3M ↔ 이용금액_페이_온라인_B0M = 0.948
이용금액_온라인_R6M ↔ 이용금액_온라인_R3M = 0.947
이용건수_신용_R3M ↔ 이용건수_오프라인_B0M = 0.947
이용건수_신판_R3M ↔ 이용건수_오프라인_B0M = 0.947
최종이용일자_카드론 ↔ 최종카드론_대출이율 = 0.947
이용금액_체크_B0M ↔ 이용금액_체크_R12M = 0.947
이용건수_일시불_R3M ↔ 이용건수_오프라인_B0M = 0.947
최종카드론이용경과월 ↔ 최종카드론_대출이율 = -0.947
최대이용금액_할부_R12M ↔ 최대이용금액_할부_무이자_R12M = 0.947
이용건수_할부_무이자_R6M ↔ 이용건수_할부_무이자_R3M = 0.946
이용개월수_할부_R6M ↔ 이용개월수_할부_R3M = 0.946
이용개월수_신용_R6M ↔ 이용개월수_오프라인_R6M = 0.946
이용건수_카드론_R6M ↔ 이용금액_카드론_R6M = 0.945
이용건수_CA_R3M ↔ 이용개월수_CA_R3M = 0.945
이용금액_A페이_R6M ↔ 이용금액_A페이_B0M = 0.945
이용금액_선결제_R3M ↔ 이용금액_선결제_B0M = 0.944
이용건수_할부_유이자_R12M ↔ 할부건수_유이자_3M_R12M = 0.944
금액_할부전환_R6M ↔ 금액_할부전환_R3M = 0.944
이용후경과월_체크 ↔ 이용개월수_체크_R6M = -0.944
이용건수_페이_온라인_R6M ↔ 이용건수_간편결제_R6M = 0.944
이용건수_온라인_R6M ↔ 이용건수_온라인_B0M = 0.943
이용건수_오프라인_R6M ↔ 이용건수_오프라인_B0M = 0.942
이용건수_CA_R6M ↔ 이용개월수_CA_R3M = 0.942
이용건수_할부_R3M ↔ 이용건수_할부_무이자_R3M = 0.942
이용건수_A페이_R3M ↔ 이용건수_A페이_B0M = 0.942
이용금액_페이_오프라인_R6M ↔ 이용금액_페이_오프라인_B0M = 0.941
이용금액_CA_R12M ↔ 최대이용금액_CA_R12M = 0.941
이용금액_할부_무이자_R12M ↔ 할부금액_무이자_3M_R12M = 0.941
이용건수_신판_R6M ↔ 이용건수_오프라인_B0M = 0.940
이용건수_신용_R6M ↔ 이용건수_오프라인_B0M = 0.940
이용건수_일시불_R6M ↔ 이용건수_오프라인_B0M = 0.940
이용개월수_할부_R6M ↔ 이용개월수_할부_무이자_R6M = 0.938
이용개월수_CA_R6M ↔ 이용건수_CA_R3M = 0.938
이용후경과월_체크 ↔ 이용개월수_체크_R12M = -0.938
이용개월수_CA_R12M ↔ 이용개월수_CA_R6M = 0.937
이용개월수_할부_R12M ↔ 이용개월수_할부_R6M = 0.937
이용건수_신판_R3M ↔ 이용가맹점수 = 0.937
이용건수_신용_R3M ↔ 이용가맹점수 = 0.937
이용횟수_선결제_R6M ↔ 이용금액_선결제_R3M = 0.936
이용후경과월_체크 ↔ 이용개월수_체크_R3M = -0.936
이용금액_CA_R12M ↔ 이용금액_CA_R6M = 0.936
이용건수_일시불_R3M ↔ 이용가맹점수 = 0.936
이용건수_페이_온라인_R3M ↔ 이용건수_페이_온라인_B0M = 0.935
이용금액_C페이_R6M ↔ 이용금액_C페이_R3M = 0.935
이용건수_신판_B0M ↔ 이용가맹점수 = 0.935
이용건수_신용_B0M ↔ 이용가맹점수 = 0.935
건수_할부전환_R6M ↔ 건수_할부전환_R3M = 0.935
이용개월수_체크_R12M ↔ 이용개월수_체크_R3M = 0.934
건수_할부전환_R3M ↔ 금액_할부전환_R6M = 0.934
이용건수_일시불_B0M ↔ 이용가맹점수 = 0.934
이용금액_페이_오프라인_B0M ↔ 이용금액_A페이_R6M = 0.934
이용금액_일시불_B0M ↔ 이용금액_일시불_R12M = 0.933
쇼핑_온라인_이용금액 ↔ 이용금액_온라인_B0M = 0.933
이용건수_할부_B0M ↔ 이용건수_할부_무이자_B0M = 0.933
건수_할부전환_R6M ↔ 금액_할부전환_R3M = 0.933
이용개월수_할부_무이자_R6M ↔ 이용개월수_할부_무이자_R3M = 0.933
할부금액_6M_R12M ↔ 할부금액_무이자_6M_R12M = 0.933
이용건수_페이_오프라인_R6M ↔ 이용개월수_A페이_R6M = 0.933
이용건수_할부_무이자_R6M ↔ 이용개월수_할부_무이자_R6M = 0.932
이용금액_페이_오프라인_R6M ↔ 이용금액_A페이_B0M = 0.932
이용건수_신판_R3M ↔ 이용건수_오프라인_R3M = 0.932
이용건수_신용_R3M ↔ 이용건수_오프라인_R3M = 0.932
이용건수_일시불_R3M ↔ 이용건수_오프라인_R3M = 0.932
이용건수_부분무이자_R3M ↔ 이용개월수_부분무이자_R3M = 0.932
이용금액_CA_B0M ↔ 이용금액_CA_R6M = 0.932
최종카드론_대출월수 ↔ 최종카드론_대출금액 = 0.931
이용건수_신판_R6M ↔ 이용가맹점수 = 0.931
이용건수_신용_R6M ↔ 이용가맹점수 = 0.931
이용횟수_선결제_R3M ↔ 이용횟수_선결제_B0M = 0.931
이용건수_할부_B0M ↔ 이용건수_할부_R3M = 0.930
이용건수_페이_오프라인_B0M ↔ 이용건수_A페이_B0M = 0.929
이용금액_간편결제_R6M ↔ 이용금액_간편결제_B0M = 0.929
이용건수_일시불_R6M ↔ 이용가맹점수 = 0.929
이용개월수_일시불_R12M ↔ 이용개월수_일시불_R6M = 0.929
이용후경과월_할부_유이자 ↔ 이용개월수_할부_유이자_R12M = -0.929
이용금액_B페이_R3M ↔ 이용건수_B페이_R3M = 0.929
이용금액_할부_R12M ↔ 이용금액_할부_무이자_R12M = 0.929
이용건수_할부_무이자_R12M ↔ 할부건수_3M_R12M = 0.929
이용개월수_신용_R12M ↔ 이용개월수_신판_R6M = 0.928
이용건수_CA_B0M ↔ 이용개월수_CA_R3M = 0.928
이용개월수_일시불_R12M ↔ 이용개월수_신판_R6M = 0.928
이용건수_CA_B0M ↔ 이용금액_CA_B0M = 0.928
이용개월수_신판_R12M ↔ 이용개월수_신판_R6M = 0.928
이용건수_할부_무이자_R3M ↔ 이용개월수_할부_무이자_R3M = 0.928
이용개월수_신용_R12M ↔ 이용개월수_일시불_R6M = 0.927
이용개월수_신용_R12M ↔ 이용개월수_신용_R6M = 0.927
이용금액_할부_R12M ↔ 할부금액_3M_R12M = 0.927
이용건수_A페이_R6M ↔ 이용건수_A페이_B0M = 0.927
이용건수_CA_B0M ↔ 이용건수_CA_R6M = 0.927
이용개월수_신판_R12M ↔ 이용개월수_일시불_R6M = 0.927
이용건수_페이_온라인_R6M ↔ 이용건수_페이_온라인_B0M = 0.927
이용횟수_선결제_R3M ↔ 이용금액_선결제_B0M = 0.927
이용건수_할부_R12M ↔ 할부건수_무이자_3M_R12M = 0.927
이용가맹점수 ↔ 이용건수_오프라인_R6M = 0.927
이용개월수_페이_오프라인_R6M ↔ 이용건수_A페이_R6M = 0.926
이용건수_할부_무이자_B0M ↔ 이용건수_할부_무이자_R3M = 0.926
이용금액_일시불_R12M ↔ 이용금액_일시불_R6M = 0.926
이용건수_C페이_R6M ↔ 이용건수_C페이_R3M = 0.925
이용금액_온라인_R3M ↔ 이용금액_온라인_B0M = 0.925
이용건수_카드론_R3M ↔ 이용개월수_카드론_R3M = 0.925
이용금액_C페이_R6M ↔ 이용건수_C페이_R3M = 0.925
_2순위쇼핑업종_이용금액 ↔ _3순위쇼핑업종_이용금액 = 0.924
이용건수_CA_R12M ↔ 이용개월수_CA_R3M = 0.924
이용개월수_신판_R12M ↔ 이용개월수_신용_R6M = 0.924
이용건수_카드론_R12M ↔ 이용개월수_카드론_R12M = 0.924
이용금액_카드론_R3M ↔ 이용개월수_카드론_R3M = 0.924
이용금액_일시불_R12M ↔ 이용금액_일시불_R3M = 0.924
이용개월수_일시불_R12M ↔ 이용개월수_신용_R6M = 0.924
이용개월수_CA_R12M ↔ 이용건수_CA_R6M = 0.923
이용건수_신판_B0M ↔ 이용건수_오프라인_R3M = 0.923
이용건수_신판_R6M ↔ 이용건수_오프라인_R3M = 0.923
이용건수_신용_B0M ↔ 이용건수_오프라인_R3M = 0.923
이용건수_신용_R6M ↔ 이용건수_오프라인_R3M = 0.923
이용건수_일시불_B0M ↔ 이용건수_오프라인_R3M = 0.923
이용건수_일시불_R6M ↔ 이용건수_오프라인_R3M = 0.923
이용건수_페이_오프라인_R3M ↔ 이용개월수_A페이_R6M = 0.923
이용개월수_신판_R3M ↔ 이용개월수_오프라인_R6M = 0.923
이용개월수_할부_무이자_R12M ↔ 이용개월수_할부_무이자_R6M = 0.922
RP건수_통신_B0M ↔ RP후경과월_통신 = -0.922
이용횟수_선결제_R6M ↔ 이용금액_선결제_R6M = 0.922
이용건수_A페이_R6M ↔ 이용금액_A페이_B0M = 0.922
이용개월수_일시불_R3M ↔ 이용개월수_오프라인_R6M = 0.922
이용건수_할부_R6M ↔ 이용개월수_할부_R6M = 0.921
_1순위쇼핑업종_이용금액 ↔ 이용금액_온라인_B0M = 0.921
이용금액_페이_온라인_R6M ↔ 이용금액_페이_온라인_B0M = 0.921
이용건수_페이_온라인_R6M ↔ 이용건수_간편결제_R3M = 0.921
이용횟수_선결제_R6M ↔ 이용금액_선결제_B0M = 0.921
이용건수_페이_오프라인_B0M ↔ 이용개월수_A페이_R6M = 0.920
이용개월수_할부_무이자_R12M ↔ 이용개월수_할부_R6M = 0.920
이용건수_할부_유이자_R6M ↔ 이용금액_할부_유이자_R6M = 0.920
이용건수_CA_B0M ↔ 이용개월수_CA_R6M = 0.918
이용금액_오프라인_R6M ↔ 이용금액_오프라인_R3M = 0.918
이용건수_신판_R12M ↔ 이용건수_오프라인_B0M = 0.918
이용건수_신용_R12M ↔ 이용건수_오프라인_B0M = 0.918
이용건수_할부_유이자_R3M ↔ 이용금액_할부_유이자_R3M = 0.918
여유_운동이용금액 ↔ _1순위여유업종_이용금액 = 0.918
이용건수_일시불_R12M ↔ 이용건수_오프라인_B0M = 0.918
RP건수_가스_B0M ↔ RP후경과월_가스 = -0.917
이용금액_연체_R6M ↔ 이용금액_연체_R3M = 0.917
이용건수_페이_오프라인_R3M ↔ 이용건수_A페이_B0M = 0.917
이용개월수_신용_R3M ↔ 이용개월수_오프라인_R6M = 0.917
이용건수_신판_R6M ↔ 이용건수_오프라인_R6M = 0.916
이용건수_신용_R6M ↔ 이용건수_오프라인_R6M = 0.916
이용건수_할부_R6M ↔ 이용개월수_할부_무이자_R6M = 0.916
이용건수_일시불_R6M ↔ 이용건수_오프라인_R6M = 0.916
RP건수_B0M ↔ RP유형건수_B0M = 0.916
이용건수_페이_온라인_R3M ↔ 이용건수_간편결제_R6M = 0.916
정상청구원금_B2M ↔ 정상청구원금_B5M = 0.916
이용건수_CA_R12M ↔ 이용건수_CA_R3M = 0.916
이용금액_CA_B0M ↔ 이용건수_CA_R6M = 0.915
이용금액_CA_B0M ↔ 이용건수_CA_R3M = 0.915
이용건수_온라인_R6M ↔ 이용금액_온라인_B0M = 0.915
이용건수_할부_R12M ↔ 이용건수_할부_R6M = 0.915
쇼핑_온라인_이용금액 ↔ 이용금액_온라인_R3M = 0.914
이용후경과월_부분무이자 ↔ 할부금액_부분_12M_R12M = -0.914
이용건수_할부_무이자_R12M ↔ 이용건수_할부_무이자_R6M = 0.914
이용건수_할부_유이자_R6M ↔ 이용건수_할부_유이자_R3M = 0.914
이용개월수_페이_오프라인_R6M ↔ 이용건수_A페이_B0M = 0.913
이용후경과월_부분무이자 ↔ 이용금액_부분무이자_R12M = -0.913
이용금액_B페이_R6M ↔ 이용금액_B페이_R3M = 0.913
이용금액_일시불_R3M ↔ 이용금액_오프라인_B0M = 0.912
이용금액_오프라인_R3M ↔ 이용금액_오프라인_B0M = 0.912
이용후경과월_부분무이자 ↔ 이용개월수_부분무이자_R12M = -0.911
이용금액_일시불_B0M ↔ 이용금액_오프라인_B0M = 0.911
이용건수_신판_R3M ↔ 이용건수_오프라인_R6M = 0.911
이용개월수_간편결제_R6M ↔ 이용건수_간편결제_R3M = 0.911
이용건수_일시불_R3M ↔ 이용건수_오프라인_R6M = 0.911
이용건수_신용_R3M ↔ 이용건수_오프라인_R6M = 0.911
이용금액_카드론_R12M ↔ 최대이용금액_카드론_R12M = 0.910
정상청구원금_B0M ↔ 정상청구원금_B5M = 0.910
정상입금원금_B0M ↔ 정상입금원금_B2M = 0.910
이용건수_페이_오프라인_R6M ↔ 이용건수_A페이_R6M = 0.910
이용건수_페이_온라인_R3M ↔ 이용건수_간편결제_R3M = 0.909
이용건수_할부_무이자_R6M ↔ 이용개월수_할부_무이자_R3M = 0.909
이용금액_할부_무이자_R12M ↔ 할부금액_3M_R12M = 0.909
이용건수_페이_오프라인_R6M ↔ 이용건수_A페이_B0M = 0.909
이용건수_할부_R6M ↔ 이용건수_할부_무이자_R3M = 0.908
이용건수_페이_온라인_B0M ↔ 이용건수_간편결제_R6M = 0.908
이용개월수_페이_오프라인_R6M ↔ 이용건수_A페이_R3M = 0.908
이용금액_할부_R6M ↔ 이용금액_할부_무이자_R6M = 0.908
이용횟수_선결제_R6M ↔ 이용횟수_선결제_B0M = 0.908
이용금액_CA_R12M ↔ 이용금액_CA_R3M = 0.908
최초카드론이용경과월 ↔ 최종카드론_대출월수 = -0.907
쇼핑_온라인_이용금액 ↔ 이용금액_온라인_R6M = 0.907
이용개월수_페이_오프라인_R6M ↔ 이용금액_페이_오프라인_B0M = 0.907
이용개월수_CA_R12M ↔ 이용개월수_CA_R3M = 0.907
이용개월수_간편결제_R6M ↔ 이용건수_간편결제_B0M = 0.907
최대이용금액_체크_R12M ↔ 이용금액_체크_R6M = 0.907
이용금액_일시불_R6M ↔ 이용금액_오프라인_B0M = 0.907
이용금액_CA_B0M ↔ 이용개월수_CA_R6M = 0.907
이용건수_A페이_R6M ↔ 이용금액_A페이_R3M = 0.906
이용금액_온라인_R6M ↔ 이용금액_온라인_B0M = 0.906
이용개월수_할부_R3M ↔ 이용개월수_할부_무이자_R3M = 0.906
이용건수_할부_R3M ↔ 이용금액_할부_R3M = 0.905
이용개월수_할부_무이자_R6M ↔ 이용건수_할부_무이자_R3M = 0.905
_1순위쇼핑업종_이용금액 ↔ 이용금액_온라인_R3M = 0.904
이용금액_선결제_R6M ↔ 이용금액_선결제_B0M = 0.904
이용건수_신판_B0M ↔ 이용건수_오프라인_R6M = 0.904
이용건수_신판_R12M ↔ 이용가맹점수 = 0.904
이용건수_일시불_B0M ↔ 이용건수_오프라인_R6M = 0.904
이용건수_신용_B0M ↔ 이용건수_오프라인_R6M = 0.904
이용건수_신용_R12M ↔ 이용가맹점수 = 0.904
이용개월수_간편결제_R6M ↔ 이용건수_간편결제_R6M = 0.904
이용금액_CA_B0M ↔ 이용개월수_CA_R3M = 0.903
이용금액_CA_B0M ↔ 이용건수_CA_R12M = 0.903
이용후경과월_부분무이자 ↔ 최대이용금액_부분무이자_R12M = -0.903
이용건수_할부_무이자_R6M ↔ 이용건수_할부_R3M = 0.903
이용금액_B페이_R6M ↔ 이용건수_B페이_R6M = 0.903
이용건수_C페이_R6M ↔ 이용금액_C페이_R3M = 0.902
이용건수_일시불_R12M ↔ 이용가맹점수 = 0.902
이용건수_할부_R3M ↔ 이용개월수_할부_R3M = 0.902
이용금액_온라인_B0M ↔ 이용금액_페이_온라인_B0M = 0.902
이용금액_페이_오프라인_B0M ↔ 이용건수_A페이_R6M = 0.902
이용건수_온라인_R3M ↔ 이용금액_온라인_B0M = 0.901
최대이용금액_체크_R12M ↔ 이용금액_체크_R3M = 0.900
이용건수_신판_R12M ↔ 이용건수_오프라인_R3M = 0.900
"""  # 여기에 전체 상관계수 텍스트 붙이기

# 정규식으로 쌍 추출
pattern = r'(.+?) ↔ (.+?) = ([\-0-9.]+)'
matches = re.findall(pattern, corr_text)

# 상관계수 절댓값 0.9 이상인 쌍 중 두 번째 항목만 추출
drop_candidates = [
    pair[1].strip()
    for pair in matches
    if abs(float(pair[2])) >= 0.9
]

# 중복 제거
drop_candidates = list(set(drop_candidates))

# df_all에 존재하는 컬럼만 필터링
drop_cols = [col for col in drop_candidates if col in df_all.columns]

# 컬럼 제거
df_all = df_all.drop(columns=drop_cols)

# 남은 컬럼 수와 컬럼 목록 확인
remaining_cols = df_all.columns
print("남은 컬럼 수:", len(remaining_cols))
print("남은 컬럼 목록:")
for col in remaining_cols:
    print(col)

# 데이터프레임 요약 정보(선택)
df_all.info()

import numpy as np
import pandas as pd


# 기준값 설정

MISS_THR   = 0.50   # 결측치 비율
CONST_THR  = 0.99   # 단일값 비율
VAR_THR    = 1e-4   # 분산 기준 (수치형)


# 1. 결측치 비율이 높은 컬럼

missing_ratio = df_all.isna().mean()
cols_missing = missing_ratio[missing_ratio >= MISS_THR].index.tolist()


# 2. 단일값(최빈값 포함) 비율이 너무 높은 컬럼

def constant_ratio(s):
    most_freq = s.mode(dropna=False)
    if len(most_freq) == 0:
        return 1.0
    return (s == most_freq.iloc[0]).mean()

cols_constant = [
    col for col in df_all.columns
    if constant_ratio(df_all[col]) >= CONST_THR
]


# 3. 분산이 너무 낮은 컬럼 (수치형만)

numeric_cols = df_all.select_dtypes(include=[np.number]).columns
low_variance = df_all[numeric_cols].var()
cols_lowvar = low_variance[low_variance <= VAR_THR].index.tolist()


# 최종 제거 대상 컬럼

drop_cols = sorted(set(cols_missing + cols_constant + cols_lowvar))


# 제거 수행

df_all = df_all.drop(columns=drop_cols)


# 제거된 컬럼 목록

print("❌ 제거된 컬럼 수:", len(drop_cols))
print("❌ 제거된 컬럼 목록:")
for col in drop_cols:
    print(col)


# 남은 컬럼 목록

remaining_cols = df_all.columns.tolist()
print("\n✅ 남은 컬럼 수:", len(remaining_cols))
print("✅ 남은 컬럼 목록:")
for col in remaining_cols:
    print(col)

import os
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 디렉토리 생성
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)

# PDF 저장 경로
pdf_path = os.path.join(save_dir, "최종이용일자_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 날짜형 컬럼 추출
final_use_cols = [col for col in df_all.columns if col.startswith("최종이용일자")]

# 시각화
for col in final_use_cols:
    df_all[col] = pd.to_datetime(df_all[col], errors='coerce')
    df_all[col + "_days"] = (df_all[col] - pd.Timestamp("1970-01-01")) / pd.Timedelta(days=1)
    data = df_all[col + "_days"].dropna()

    # 박스플롯
    plt.figure(figsize=(4, 3))
    plt.boxplot(data)
    plt.title(f"{col} (박스플롯)", fontproperties=font_prop)
    plt.ylabel("Days since 1970-01-01", fontproperties=font_prop)
    plt.tight_layout()
    pdf_pages.savefig()
    plt.show()

    # 히스토그램
    plt.figure(figsize=(4, 3))
    plt.hist(data, bins=30)
    plt.title(f"{col} (히스토그램)", fontproperties=font_prop)
    plt.xlabel("Days since 1970-01-01", fontproperties=font_prop)
    plt.ylabel("빈도수", fontproperties=font_prop)
    plt.tight_layout()
    pdf_pages.savefig()
    plt.show()

pdf_pages.close()

"""### 1. 최종이용일자
- **컬럼**: `최종이용일자_기본`, `최종이용일자_CA`, `최종이용일자_카드론`, `최종이용일자_체크`, `최종이용일자_할부`
- **인사이트**: 최근일수록 A/B Segment 분포가 높음. 장기 미사용 고객은 D/E에 많음.
- **결론**: **전체 유지** + 시계열 파생 변수 고려
"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 설정
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "이용건수_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 대상 컬럼: '이용건수' 포함
usage_cols = [col for col in df_all.columns if "이용건수" in col]

# Segment 목록
segments = df_all["Segment"].unique()

# 시각화
for col in usage_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()

        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율 기준)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 2. 이용건수
- **컬럼**: `이용건수_기본_R6M`, `이용건수_기본_R3M`, `이용건수_기본_B0M`, `이용건수_CA_R3M`, `이용건수_CA_B0M`, `이용건수_체크_R3M`, `이용건수_체크_B0M`, `이용건수_신용_R12M`, `이용건수_신판_R12M`, `이용건수_할부_유이자_B0M`, `이용건수_부분무이자_B0M`, `이용건수_부분무이자_R12M`, `이용건수_할부_무이자_B0M`, `이용건수_선결제_R6M`, `이용건수_선결제_R3M`, `이용건수_연체_R6M`, `이용건수_연체_R3M`
- **인사이트**: A/B는 다양한 채널에서 건수 높음. C/D/E는 일부 채널 집중.
- **결론**: **중복 채널 제거 고려** → 대표 채널만 유지

"""

import os
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# ----------------------------- #
# 1. 시각화 환경 설정
# ----------------------------- #
# 한글 폰트
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "이용금액_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# ----------------------------- #
# 2. 대상 컬럼 및 Segment 목록
# ----------------------------- #
amount_cols = [c for c in df_all.columns if "이용금액" in c]
segments = df_all["Segment"].unique()

# ----------------------------- #
# 3. 시각화 루프
#    · 수치형 컬럼만 시각화
#    · 히스토그램은 비율 기준
# ----------------------------- #
for col in amount_cols:
    # 수치형 컬럼인지 확인 (문자·날짜형 제외)
    if not pd.api.types.is_numeric_dtype(df_all[col]):
        print(f"[SKIP] 숫자형이 아닌 컬럼: {col}")
        continue

    for seg in segments:
        data = df_all.loc[df_all["Segment"] == seg, col].dropna()

        if data.empty:
            continue

        # --- 박스플롯 ---
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # --- 히스토그램 (비율) ---
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights, edgecolor="black")
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

# ----------------------------- #
# 4. PDF 저장 종료
# ----------------------------- #
pdf_pages.close()
print(f"PDF 저장 완료: {pdf_path}")

"""## 3. 이용금액

- **관련 컬럼**:
- **관련 컬럼**:
  - `이용금액_온라인_R6M`, `이용금액_오프라인_R6M`, `이용금액_온라인_R3M`, `이용금액_오프라인_R3M`, `이용금액_온라인_B0M`, `이용금액_오프라인_B0M`
  - `이용금액_페이_온라인_R6M`, `이용금액_페이_오프라인_R6M`, `이용금액_페이_온라인_R3M`, `이용금액_페이_오프라인_R3M`, `이용금액_페이_온라인_B0M`, `이용금액_페이_오프라인_B0M`
  - `이용금액_간편결제_R6M`, `이용금액_간편결제_R3M`, `이용금액_간편결제_B0M`
  - `이용금액_선결제_R6M`, `이용금액_선결제_R3M`, `이용금액_선결제_B0M`
  - `이용금액_연체_R6M`, `이용금액_연체_R3M`, `이용금액_연체_B0M`
  - `이용금액대`, `가맹점매출금액_B1M`, `가맹점매출금액_B2M`


- **인사이트**:
  - Segment A/B: 온라인·페이·간편결제 중심, 고금액 소비
  - Segment D/E: 오프라인 중심, 소비액 낮고 연체금액 높음
  - 전체적으로 금액 편차 큼 → 로그스케일 또는 구간화 필요
  - 일부 페이/간편결제/온라인 항목 간 중복 존재

- **피처 선택 기준 적용**:
  1. **완전중복 제거**: 페이/간편결제 중 하나만 유지
  2. **대표기간만 유지**: R3M 등 대표 시계열 선택
  3. **중복개념 통합**: 유사 결제 수단은 그룹화 가능
  4. **비율 변수 생성**: 건수 대비 금액 비율 파생 변수 고려

- **결론**:
  - **중복·유사 변수 정리 후 대표 변수만 유지**
  - **소비패턴·리스크 파악에 중요한 핵심 변수군**
"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 파일 생성
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "이용후경과월_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼 필터링
elapsed_cols = [col for col in df_all.columns if "이용후경과월" in col]

# Segment 목록
segments = df_all["Segment"].unique()

# 시각화
for col in elapsed_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()

        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("개월 수", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("개월 수", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 4. 이용후경과월
- **컬럼**: `이용후경과월_기본`, `이용후경과월_신판`, `이용후경과월_체크`, `이용후경과월_CA`
- **인사이트**: 최근 이용 고객은 A/B, 미사용 장기 고객은 D/E.
- **결론**: **전체 유지** + 최종이용일자와 함께 시계열 파생 가능
"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "최대이용금액_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼명 필터링
max_amount_cols = [col for col in df_all.columns if "최대이용금액" in col]

# Segment 목록
segments = df_all["Segment"].unique()

# 시각화
for col in max_amount_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()

        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("금액", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("금액", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 5. 최대이용금액
- **컬럼**: `최대이용금액_기본_R12M`, `최대이용금액_기본_R3M`, `최대이용금액_체크_R12M`, `최대이용금액_체크_R3M`, `최대이용금액_CA_R12M`, `최대이용금액_CA_R3M`
- **인사이트**: A/C 세그먼트에 고소비 집중, 체크는 전반적으로 낮음
- **결론**: **기본 변수 유지, 체크/CA 제거 가능*
"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "이용개월수_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼 필터링
use_month_cols = [col for col in df_all.columns if "이용개월수" in col]

# Segment 목록
segments = df_all["Segment"].unique()

# 시각화
for col in use_month_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()

        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("이용 개월수", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("이용 개월수", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""
### 6. 이용개월수
- **컬럼**: `이용개월수_기본_R6M`, `이용개월수_체크_R6M`, `이용개월수_CA_R6M`, `이용개월수_할부_R6M`, `이용개월수_전체_R6M`, `이용개월수_결제일_R6M`
- **인사이트**: A/B는 꾸준한 이용 경향, 채널 다양
- **결론**: **중복 통합 또는 대표 채널 유지** → 전체 or 기본 유지"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "쇼핑_교통_여유_납부_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼 필터링
group_keywords = ["쇼핑_", "교통_", "여유_", "납부_"]
category_cols = [col for col in df_all.columns if any(key in col for key in group_keywords)]

# Segment 목록
segments = df_all["Segment"].unique()

# 시각화
for col in category_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()

        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("이용금액", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("이용금액", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 7. 쇼핑/교통/여유/납부
- **컬럼**: `쇼핑_이용금액`, `교통_통행료이용금액`, `여유_Pet이용금액`, `여유_공원이용금액`, `여유_숙박이용금액`, `여유_여행이용금액`, `여유_항공이용금액`, `여유_기타이용금액`, `납부_관리비이용금액`, `납부_렌탈료이용금액`, `납부_가스전기료이용금액`, `납부_유선방송이용금액`, `납부_건강연금이용금액`
- **인사이트**: Segment D/E는 납부·여유 항목 비중 높고, A/B는 쇼핑 중심 소비.
- **결론**: **쇼핑은 유지, 여유/납부는 대표 항목만 선별 유지**
"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "업종순위_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼 필터링
category_cols = [col for col in df_all.columns if any(key in col for key in ["_1순위", "_2순위", "_3순위"])]

# Segment 목록
segments = df_all["Segment"].unique()

for col in category_cols:
    if df_all[col].dtype == "object":  # 범주형이면 막대그래프
        for seg in segments:
            data = df_all[df_all["Segment"] == seg][col].dropna()
            if data.empty:
                continue
            plt.figure(figsize=(4, 3))
            freq = data.value_counts(normalize=True).sort_index()
            plt.bar(freq.index.astype(str), freq.values)
            plt.title(f"{col} - {seg} (막대그래프)", fontproperties=font_prop)
            plt.ylabel("비율", fontproperties=font_prop)
            plt.xticks(rotation=45)
            plt.tight_layout()
            pdf_pages.savefig()
            plt.show()

    else:  # 수치형이면 박스플롯 + 히스토그램
        for seg in segments:
            data = df_all[df_all["Segment"] == seg][col].dropna()
            if data.empty:
                continue

            # 박스플롯
            plt.figure(figsize=(4, 3))
            plt.boxplot(data)
            plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
            plt.ylabel("이용금액", fontproperties=font_prop)
            plt.tight_layout()
            pdf_pages.savefig()
            plt.show()

            # 히스토그램 (비율)
            plt.figure(figsize=(4, 3))
            weights = [1 / len(data)] * len(data)
            plt.hist(data, bins=30, weights=weights)
            plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
            plt.xlabel("이용금액", fontproperties=font_prop)
            plt.ylabel("비율", fontproperties=font_prop)
            plt.tight_layout()
            pdf_pages.savefig()
            plt.show()

pdf_pages.close()

"""### 8. 업종순위
- **컬럼**: `_1순위업종`, `_2순위여유업종_이용금액`, `_3순위여유업종_이용금액`, `_3순위납부업종_이용금액`
- **인사이트**: 업종 분류로 고객 선호 및 특성 확인 가능.
- **결론**: **1순위 유지**, 2~3순위는 **정보 중복 가능성 높아 제거 고려**

"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "할부건수_할부금액_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼 필터링
installment_cols = [col for col in df_all.columns if "할부" in col and ("건수" in col or "금액" in col)]

# Segment 목록
segments = df_all["Segment"].unique()

for col in installment_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()
        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 9. 할부건수/할부금액
- **컬럼**: `할부건수_유이자_6M_R12M`, `할부건수_무이자_3M_R12M`, `할부건수_무이자_6M_R12M`, `할부건수_무이자_12M_R12M`, `할부금액_유이자_6M_R12M`, `할부금액_무이자_3M_R12M`, `할부금액_무이자_6M_R12M`
- **인사이트**: A는 다양한 할부 유형 활용, D/E는 거의 없음.
- **결론**: **유형별 대표값 유지**, 비중 낮은 할부 기간 항목은 제거
"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "RP건수_RP금액_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼 필터링
rp_cols = [col for col in df_all.columns if "RP건수" in col or "RP금액" in col]

# Segment 목록
segments = df_all["Segment"].unique()

for col in rp_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()
        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 10. RP건수/RP금액
- **컬럼**: `RP건수_교통_R3M`, `RP건수_통신_R3M`, `RP건수_기타_R3M`, `RP금액_교통_R3M`, `RP금액_통신_R3M`, `RP금액_기타_R3M`
- **인사이트**: RP 활동은 주로 B세그먼트에 집중됨.
- **결론**: **RP금액만 대표로 유지**, 건수는 비례 가능성 있어 통합 고려

"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "RP후경과월_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼 필터링
rp_elapsed_cols = [col for col in df_all.columns if "RP후경과월" in col]

# Segment 목록
segments = df_all["Segment"].unique()

for col in rp_elapsed_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()
        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("개월 수", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("개월 수", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 11. RP후경과월
- **컬럼**: `RP후경과월_교통`, `RP후경과월_통신`, `RP후경과월_기타`
- **인사이트**: A/B는 최근 RP 활동 많음. 장기 미사용은 D/E.
- **결론**: **전체 유지**, 단, 유사 경향 시 단일 파생 변수화 고려
"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "RP증감_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼 필터링
rp_diff_cols = [col for col in df_all.columns if "증감_RP" in col]

# Segment 목록
segments = df_all["Segment"].unique()

for col in rp_diff_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()
        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("변화량", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("변화량", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 12. RP증감
- **컬럼**: `증감_RP건수_전월`, `증감_RP유형건수_전월`, `증감_RP건수_교통_전월`
- **인사이트**: RP 증감폭은 신뢰성에 영향. 급변 고객은 이탈 or 이상 소비 가능성.
- **결론**: **교통 중심 대표 항목 유지**, 나머지는 통합 파생 변수
"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "카드론_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 카드론 그룹 컬럼 필터링 + 날짜형 제외
cardloan_cols = [col for col in df_all.columns if "카드론" in col]
cardloan_cols = [col for col in cardloan_cols if not pd.api.types.is_datetime64_any_dtype(df_all[col])]

# Segment 목록
segments = df_all["Segment"].unique()

for col in cardloan_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()
        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 13. 카드론

- **컬럼**:  
  `카드론이용건수_누적`,  
  `카드론이용금액_누적`,  
  `최종카드론_거치개월수`,  
  `최종카드론_대출일자`,  
  `최종카드론_대출금액`

- **인사이트**:  
  Segment C/D/E는 카드론 이용률이 높고, 특히 D는 거치개월수 긴 장기 대출이 많음.

- **결론**:  
  - `최종카드론_대출일자`는 날짜형 → **제거** (▶ 1번: 데이터 타입 문제)  
  - `대출금액`, `누적이용금액`, `거치개월수`는 **유지** (▶ 4번: 고유 정보)  
  - `이용건수`는 `금액`과 **유사 경향** → **제거 고려** (▶ 2번: 유사 정보 제거)
"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "페이_선결제_연체_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼 필터링
pay_keywords = ["페이", "선결제", "연체"]
pay_cols = [col for col in df_all.columns if any(kw in col for kw in pay_keywords)]

# Segment 목록
segments = df_all["Segment"].unique()

for col in pay_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()
        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 14. 페이/선결제/연체

- **컬럼**:  
  `이용금액_페이_온라인_R6M`,  
  `이용금액_페이_오프라인_R6M`,  
  `이용금액_페이_온라인_R3M`,  
  `이용금액_페이_오프라인_R3M`,  
  `이용건수_선결제_R6M`,  
  `이용건수_선결제_R3M`,  
  `이용금액_연체_R6M`,  
  `이용금액_연체_R3M`

- **인사이트**:  
  A/B는 간편결제 및 선결제 이용률이 높고, 연체는 D/E에서 집중됨.

- **결론**:  
  - 각 항목에서 **최근 대표 기간(`R6M`) 변수만 유지** (▶ 2번: 유사 시계열 통합)  
  - `이용건수_선결제_R3M`, `연체_R3M`, `페이_R3M` 계열 **제거**  
  - 변수 간 비율형 파생도 추후 고려 가능 (ex. `연체율 = 연체금액 / 총이용금액`)
"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "기타이용_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼 필터링
etc_cols = [col for col in df_all.columns if col.startswith("이용개월수_전체") or col.startswith("이용개월수_결제일")]

# Segment 목록
segments = df_all["Segment"].unique()

for col in etc_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()
        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 15. 기타이용

- **컬럼**:  
  `이용개월수_전체_R6M`,  
  `이용개월수_결제일_R6M`,  
  `가맹점매출금액_B1M`,  
  `가맹점매출금액_B2M`,  
  `이용금액대`

- **인사이트**:  
  A/B는 지속적 이용패턴이 뚜렷하며, `이용금액대`는 Segment 구분에 효과적.

- **결론**:  
  - `이용금액대`, `이용개월수_*`는 **유지** (▶ 4번: 고유 정보)  
  - `가맹점매출금액`은 기간만 다른 **유사 시계열** → 하나만 **대표 유지** (▶ 2번)
"""

import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 한글 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 저장 경로 및 PDF 초기화
save_dir = "/mnt/data/group_charts"
os.makedirs(save_dir, exist_ok=True)
pdf_path = os.path.join(save_dir, "청구입금_시각화.pdf")
pdf_pages = PdfPages(pdf_path)

# 해당 그룹 컬럼 필터링
bill_cols = [col for col in df_all.columns if any(key in col for key in ["정상청구원금", "선입금원금", "정상입금원금", "연체입금원금"])]

# Segment 목록
segments = df_all["Segment"].unique()

for col in bill_cols:
    for seg in segments:
        data = df_all[df_all["Segment"] == seg][col].dropna()
        if data.empty:
            continue

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(data)
        plt.title(f"{col} - {seg} (박스플롯)", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율)
        plt.figure(figsize=(4, 3))
        weights = [1 / len(data)] * len(data)
        plt.hist(data, bins=30, weights=weights)
        plt.title(f"{col} - {seg} (히스토그램)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 16. 청구입금

- **컬럼**:  
  `정상청구원금_B0M`,  
  `선입금원금_B0M`,  
  `정상입금원금_B0M`,  
  `연체입금원금_B0M`,  
  `정상청구원금_B2M`,  
  `정상청구원금_B5M`,  
  `정상입금원금_B2M`,  
  `정상입금원금_B5M`,  
  `선입금원금_B2M`,  
  `연체입금원금_B2M`,  
  `연체입금원금_B5M`

- **인사이트**:  
  Segment A/B는 정상 입금 이력이 많고, D/E는 연체 중심 분포.

- **결론**:  
  - `정상청구`, `정상입금`, `연체입금`은 **각각 대표 기간(B0M)만 유지** (▶ 2번)  
  - 나머지 기간(`B2M`, `B5M`) 변수는 **제거**
"""

import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager
import pandas as pd

# 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"  # 필요 시 사용자 환경에 맞게 변경
font_prop = font_manager.FontProperties(fname=font_path)

# 시각화 대상 컬럼
group_name = "할부전환"
columns = ["건수_할부전환_R6M"]

# PDF 저장 경로
pdf_path = f"/mnt/data/{group_name}_시각화.pdf"
pdf_pages = PdfPages(pdf_path)

# 시각화 (수치형: 박스플롯 + 히스토그램)
for col in columns:
    for segment in df_all['Segment'].unique():
        subset = df_all[df_all['Segment'] == segment]

        # 박스플롯
        plt.figure(figsize=(4,3))
        plt.boxplot(subset[col].dropna())
        plt.title(f"[{segment}] {col} - 박스플롯", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율 기준)
        plt.figure(figsize=(4,3))
        plt.hist(subset[col].dropna(), bins=20, weights=[1/len(subset)]*len(subset), edgecolor='black')
        plt.title(f"[{segment}] {col} - 히스토그램 (비율)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""## 할부전환

- `건수_할부전환_R6M`
- **인사이트**:
  - 대부분의 Segment에서 값이 매우 낮거나 0임.
  - 일부 세그먼트만 사용 이력이 있음.
- **결론**:
  - **제외 고려**, 대부분 사용 이력이 희박하여 예측에 기여도 낮음.
"""

import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 그룹명 및 컬럼 지정
group_name = "실적개월"
columns = ["연속무실적개월수_기본_24M_카드", "연속유실적개월수_기본_24M_카드"]

# PDF 저장 경로
pdf_path = f"/mnt/data/{group_name}_시각화.pdf"
pdf_pages = PdfPages(pdf_path)

# 수치형 변수에 대해 Segment별 박스플롯 & 히스토그램
for col in columns:
    for segment in df_all['Segment'].unique():
        subset = df_all[df_all['Segment'] == segment]

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(subset[col].dropna())
        plt.title(f"[{segment}] {col} - 박스플롯", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율 기반)
        plt.figure(figsize=(4, 3))
        plt.hist(subset[col].dropna(), bins=20, weights=[1/len(subset)]*len(subset), edgecolor='black')
        plt.title(f"[{segment}] {col} - 히스토그램 (비율)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 17. 실적개월

- **컬럼**:  
  `연속무실적개월수_기본_24M_카드`,  
  `연속유실적개월수_기본_24M_카드`

- **인사이트**:  
  장기 유실적 유지 고객은 A 중심, 무실적은 D/E 집중.

- **결론**:  
  - **전체 유지** (▶ 4번: 이탈 여부 판단용 핵심 지표)  
  - 단순하지만 명확한 구분 가능, 파생 변수화도 고려 가능
"""

import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 그룹명 및 컬럼 지정
group_name = "ATM"
columns = ["신청건수_ATM_CA_B0", "신청건수_ATM_CA_R6M"]

# PDF 저장 경로
pdf_path = f"/mnt/data/{group_name}_시각화.pdf"
pdf_pages = PdfPages(pdf_path)

# 수치형 변수에 대해 Segment별 박스플롯 & 히스토그램
for col in columns:
    for segment in df_all['Segment'].unique():
        subset = df_all[df_all['Segment'] == segment]

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(subset[col].dropna())
        plt.title(f"[{segment}] {col} - 박스플롯", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율 기반)
        plt.figure(figsize=(4, 3))
        plt.hist(subset[col].dropna(), bins=20, weights=[1/len(subset)]*len(subset), edgecolor='black')
        plt.title(f"[{segment}] {col} - 히스토그램 (비율)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import font_manager

# 폰트 설정
font_path = "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)

# 그룹명 및 컬럼 지정
group_name = "승인거절"
columns = ["승인거절건수_R3M", "승인거절건수_한도초과_R3M", "승인거절건수_기타_R3M"]

# PDF 저장 경로
pdf_path = f"/mnt/data/{group_name}_시각화.pdf"
pdf_pages = PdfPages(pdf_path)

# 수치형 변수에 대해 Segment별 박스플롯 & 히스토그램
for col in columns:
    for segment in df_all['Segment'].unique():
        subset = df_all[df_all['Segment'] == segment]

        # 박스플롯
        plt.figure(figsize=(4, 3))
        plt.boxplot(subset[col].dropna())
        plt.title(f"[{segment}] {col} - 박스플롯", fontproperties=font_prop)
        plt.ylabel("값", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

        # 히스토그램 (비율 기반)
        plt.figure(figsize=(4, 3))
        plt.hist(subset[col].dropna(), bins=20, weights=[1/len(subset)]*len(subset), edgecolor='black')
        plt.title(f"[{segment}] {col} - 히스토그램 (비율)", fontproperties=font_prop)
        plt.xlabel("값", fontproperties=font_prop)
        plt.ylabel("비율", fontproperties=font_prop)
        plt.tight_layout()
        pdf_pages.savefig()
        plt.show()

pdf_pages.close()

"""### 18. 승인거절

- **컬럼**:  
  `승인거절건수_R3M`,  
  `승인거절건수_한도초과_R3M`,  
  `승인거절건수_기타_R3M`

- **인사이트**:  
  한도초과 비중은 D/E 중심으로 위험고객 구분에 유용.

- **결론**:  
  - `한도초과` 항목은 **유지**,  
  - 전체건수, 기타 사유는 **중복 가능성** 높아 **제거 고려** (▶ 3번: 명칭만 다른 고상관)

| 그룹               | 유지 컬럼                                                  | 제거 대상 기준                                     |
|------------------|--------------------------------------------------------|------------------------------------------------|
| 1. 최종이용일자        | 전부 유지 (`최종이용일자_*`)                                      | 없음                                               |
| 2. 이용건수           | 대표 채널 (기본, 신용/신판)                                     | 중복 채널 및 유사 항목 제거 (CA/체크/선결제/연체 등)              |
| 3. 이용금액           | 대부분 유지 (기본, 온라인/오프라인, 페이, 간편결제, 연체 등)              | 유사 수단 중 중복 제거, R6M 기준 대표 시계열만 유지              |
| 4. 이용후경과월        | 전부 유지 (`이용후경과월_*`)                                     | 없음                                               |
| 5. 최대이용금액        | `기본_*`만 유지                                              | 체크/CA 항목 제거                                   |
| 6. 이용개월수         | `기본` 또는 `전체` 중심 대표만 유지                              | 중복되는 세부 채널 항목 제거 (체크/CA/결제일 등)                |
| 7. 쇼핑/교통/여유/납부 | `쇼핑`, `여유_여행`, `여유_항공`, `납부_관리비` 유지                  | 기타 여유·납부 항목 제거                              |
| 8. 업종순위          | `_1순위업종` 유지                                            | `_2~3순위` 항목 제거                                |
| 9. 할부건수/금액       | `할부건수_유이자_6M`, `무이자_6M`, 관련 대표 유지                     | 3M/12M 할부 항목 제거                               |
| 10. RP             | `RP금액_*` 유지                                             | `RP건수_*` 제거                                   |
| 11. RP후경과월       | 전부 유지 (`RP후경과월_*`)                                    | 없음                                               |
| 12. RP증감         | `증감_RP건수_교통_전월` 유지                                   | `증감_RP건수_전월`, `증감_RP유형건수_전월` 제거             |
| 13. 카드론           | `대출금액`, `거치개월수`, `누적이용금액` 유지                        | `최종카드론_대출일자`, `카드론이용건수_누적` 제거             |
| 14. 페이/선결제/연체    | `페이/연체/선결제` 중 `R6M` 대표 변수 유지                        | 동일 항목의 `R3M`, `B0M` 시계열 제거                   |
| 15. 기타이용          | `이용금액대`, `이용개월수_*` 유지                               | `가맹점매출금액_B1M`, `B2M` 중 하나만 유지               |
| 16. 청구입금          | `B0M` 기준 각 항목별 대표 (`정상청구`, `정상입금`, `연체입금`) 유지       | 동일 항목의 `B2M`, `B5M` 제거                         |
| 17. 실적개월          | 전부 유지 (`무실적`, `유실적`)                                    | 없음                                               |
| 18. 승인거절          | `승인거절건수_한도초과_R3M` 유지                                | 전체건수 및 기타 사유 항목 제거                         |
"""

cols_to_drop = [
    # 2. 이용건수
    '이용건수_CA_R3M', '이용건수_CA_B0M', '이용건수_체크_R3M', '이용건수_체크_B0M',
    '이용건수_부분무이자_B0M', '이용건수_부분무이자_R12M',
    '이용건수_선결제_R3M', '이용건수_연체_R3M',

    # 3. 이용금액
    '이용금액_페이_온라인_R3M', '이용금액_페이_오프라인_R3M',
    '이용금액_선결제_R3M', '이용금액_연체_R3M',

    # 5. 최대이용금액
    '최대이용금액_체크_R12M', '최대이용금액_체크_R3M',
    '최대이용금액_CA_R12M', '최대이용금액_CA_R3M',

    # 6. 이용개월수
    '이용개월수_체크_R6M', '이용개월수_CA_R6M', '이용개월수_결제일_R6M',

    # 7. 쇼핑/교통/여유/납부
    '교통_통행료이용금액', '여유_Pet이용금액', '여유_공원이용금액',
    '여유_숙박이용금액', '여유_기타이용금액',
    '납부_렌탈료이용금액', '납부_가스전기료이용금액', '납부_유선방송이용금액', '납부_건강연금이용금액',

    # 8. 업종순위
    '_2순위여유업종_이용금액', '_3순위여유업종_이용금액', '_3순위납부업종_이용금액',

    # 9. 할부건수/금액
    '할부건수_무이자_3M_R12M', '할부건수_무이자_12M_R12M',
    '할부금액_무이자_3M_R12M',

    # 10. RP건수
    'RP건수_교통_R3M', 'RP건수_통신_R3M', 'RP건수_기타_R3M',

    # 12. RP증감
    '증감_RP건수_전월', '증감_RP유형건수_전월',

    # 13. 카드론
    '카드론이용건수_누적', '최종카드론_대출일자',

    # 14. 페이/선결제/연체
    '이용금액_페이_온라인_B0M', '이용금액_페이_오프라인_B0M',
    '이용금액_페이_온라인_R3M', '이용금액_페이_오프라인_R3M',

    # 15. 기타이용 (택 1 제거)
    '가맹점매출금액_B2M',  # 혹은 B1M을 제거하고 B2M 유지

    # 16. 청구입금
    '정상청구원금_B2M', '정상청구원금_B5M',
    '정상입금원금_B2M', '정상입금원금_B5M',
    '선입금원금_B2M',
    '연체입금원금_B2M', '연체입금원금_B5M',

    # 18. 승인거절
    '승인거절건수_R3M', '승인거절건수_기타_R3M'
]

# 제거 실행
df_all = df_all.drop(columns=cols_to_drop, errors='ignore')

print(f"남은 컬럼 수: {df_all.shape[1]}")
print("남은 컬럼 목록:")
print(df_all.columns.tolist())

df_all.to_csv("최종전처리_데이터.csv", index=False, encoding="utf-8-sig")

from google.colab import files


# 다운로드
files.download("최종전처리_데이터.csv")



